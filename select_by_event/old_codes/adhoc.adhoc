'''
fox:15704546335
cnn:5550296508

1.SQL to normalize post, comment text
2.Build graph for one month
	2a. SQL to get post + message --> csv
	2b. Get edges for the graph from likedby and comment tables (NCOL file)
3.Find mentioned people,subjects,places,organizations for each post.
4.Compare soclust and lemur
	4a.Select all posts related to a set of events (events+related keywords are in csv)
	4b.Get all edges in the graph of 4a's posts
	4c.Filter out the posts that has no comment nor like
	4d.Get the messages of posts in 4c (to csv)
	4e.Use lemur to cluster 4d's messages
	4f.Compare lemur clustering and soclust clustering
5.Analyze posts in a year (some of these posts are marked with associated event
	5a.Select edges of a year
	5b.Construct graph from 5a's edges
	5c.Load event prop to graph
	5d.Load text prop to graph ==4d
	5c.Repeat 4c..4f

'''
#1.SQL to normalize post
DROP TABLE IF EXISTS temp_post;
CREATE TABLE temp_post like post;
INSERT INTO temp_post 
	SELECT * FROM post;
	
UPDATE temp_post SET message=REPLACE(message,"\r","");
UPDATE temp_post SET message=REPLACE(message,"\n",".");
UPDATE temp_post SET message=REPLACE(message,"\t"," ");
#UPDATE temp_post SET message='' WHERE message is NULL;

#2a.
SELECT '#post_id','message','people','subjects','places','organizations'
UNION ALL
SELECT id, message,'None','None','None','None'
FROM temp_post 
WHERE page_id='5550296508' 
	AND YEAR(created_time)=2010 AND MONTH(created_time)=01 
	AND LENGTH(message) > 200
INTO OUTFILE '/tmp/soclust/cnn_posts_2010-01_nyt_indexes.csv';
#2b.
SELECT CONCAT('p',post_id),CONCAT('u',fb_id)
FROM comment
WHERE post_id in 
	(SELECT id 
	FROM temp_post 
	WHERE page_id='5550296508' 
		AND YEAR(created_time)=2010 AND MONTH(created_time)=01 
		AND LENGTH(message) > 200
	)
UNION ALL
SELECT CONCAT('p',post_id),CONCAT('u',fb_id)
FROM likedby
WHERE post_id in
	(SELECT id 
	FROM temp_post 
	WHERE page_id='5550296508' 
		AND YEAR(created_time)=2010 AND MONTH(created_time)=01 
		AND LENGTH(message) > 200
	)
INTO OUTFILE '/tmp/soclust/cnn_2010-01_nyt_indexes.ncol';

#	4a.Select all posts related to a set of events (events+related keywords are in csv)
python /proj/DSL/sincere/big-server/_gited/soclust/select_by_event/by_event_io.py /proj/DSL/sincere/big-server/_gited/soclust/select_by_event/2009_events_cnn.csv /tmp/soclust/2009_events_cnn
#	4b.Get all edges in the graph of 4a's posts

#	4d.
import csv

posts={}
with open('/tmp/soclust/2010-0102_events.csv','r') as f:
	rdr=csv.reader(f,delimiter='\t')
	for row in rdr:
		posts[row[0]]=row[1]

events={}
for p,e in posts.items():
	events[e]=1


print print [p[1:] for p in posts.keys()]

print len(events)

SELECT CONCAT('u',fb_id),CONCAT('p',post_id) FROM comment where id in () INTO OUTFILE '/tmp/soclust/2010-0102.ncol';

SELECT CONCAT('p',id),message FROM temp_post WHERE id in () INTO OUTFILE '/tmp/soclust/2010_0102_text.csv';
#	4e.Use lemur to cluster 4d's messages
python /proj/DSL/sincere/big-server/_gited/soclust/lemur_clust/lemur_clustering.py /tmp/soclust/2010_0102_text.csv /tmp/soclust/2010_0102_lemur.csv 8
#	4f.Compare lemur clustering and soclust clustering

import sys;sys.path.append('/proj/DSL/sincere/big-server/_gited/soclust/select_by_event/igraph_inheritance');from userpostgraph import UserPostGraph as upg

g=upg.Read_Ncol('/tmp/soclust/2010-0102.ncol')
g.doCompoCluster()
g.loadPropsFromFile('/tmp/soclust/2010-0102_events.csv','event')
g.loadPropsFromFile('/tmp/soclust/2010-0102_lemur.csv','lemur')

vs=[v for v in g.vs if v['name'][0]=='p']
event=[v['event'] for v in vs]
lemur=[v['lemur'] for v in vs]
soclust=[v['compo']+v['clust'] for v in vs]
from sklearn import metrics

print 'lemur %f'%metrics.adjusted_rand_score(event,lemur)
print 'soclust %f'%metrics.adjusted_rand_score(event,soclust)

from igraph import *
from sklearn import metrics
#load graph from ncol or reuse from previous steps
#g=Graph.Read_GraphML('/tmp/soclust/cnn2009_CommentLikes_EventClustTextLIWCLemur12_LeadEigen.graphml')
import sys;sys.path.append('/proj/DSL/sincere/big-server/_gited/soclust/select_by_event/');import graph_with_properties as gprop
gprop.loadPropertyToGraph(g,gprop.loadPropertiesFromFile('/tmp/soclust/events.csv'),propName='event')
gprop.loadPropertyToGraph(g,gprop.loadPropertiesFromFile('/tmp/soclust/cnn2009_post_compo0_lemur10.csv'),propName='lemur')
import sys;sys.path.append('/proj/DSL/sincere/big-server/_gited/soclust/select_by_event/');import graph_text_event_clust as clustering
clustering.doCompoClustering(g)

vs=[v for v in g.vs if v['name'][0]=='p']
event=[v['event'] for v in vs]
lemur=[v['lemur'] for v in vs]
soclust=[v['compo']+v['clust'] for v in vs]

print 'lemur12 %f'%metrics.adjusted_rand_score(event,lemur)
print 'soclust %f'%metrics.adjusted_rand_score(event,soclust)


#	5a.Select edges of a year
SELECT CONCAT('p',post_id), CONCAT('u',fb_id) FROM comment WHERE page_id='5550296508' AND YEAR(created_time)=2009
UNION ALL
SELECT CONCAT ('p', post_id), CONCAT('u',fb_id) FROM likedby WHERE page_id='5550296508' AND YEAR(created_time)=2009
INTO OUTFILE '/tmp/soclust/cnn2009.ncol';

#	5b.Build graph from edges in 5a.

#	5d.Load text prop to graph ==4d
SELECT CONCAT('p',id),message FROM temp_post WHERE page_id='5550296508' AND YEAR(created_time)=2009
INTO OUTFILE '/tmp/soclust/cnn2009_text.ncol';
#	5c.Repeat 4c..4f
	
#post_ids that are grouped:
#35
'46899641508', '97701956508', '100070391508', '101381251508', '101839186508', '102074921508', '103791821359', '116015066680', '117099777700', '124497376508', '124774471508', '125182071508', '125182771508', '126009311508', '133460336508', '144324586508', '144339266508', '145992284022', '146076921508', '147044396508', '152678826508', '153148646508', '172794296508', '175856177923', '184442668548', '187481577632', '191662812162', '192609927623', '193662438023', '199452892615', '200560301564', '200922031566', '206325450574', '208006174574', '238059246240'
#232
'101941416508', '101733071508', '144339266508', '200922031566', '99290186508', '199452892615', '125182771508', '187481577632', '146076921508', '124657566508', '98283016508', '10150376644541509', '97633151508', '99290211508', '10150376644821509', '10150376647586509', '101748836508', '100070391508', '10150376648561509', '149769166508', '99290236508', '101381251508', '10150376644336509', '10150376652801509', '193662438023', '102064576508', '97401851508', '10150376644761509', '97425521508', '10150376645081509', '191662812162', '116015066680', '133460336508', '10150376647646509', '124649841508', '101784801508', '101964471508', '10150376654156509', '124774471508', '98852731508', '152678826508', '97356661508', '10150376647886509', '10150376653871509', '99290151508', '124667436508', '143642036508', '98731916508', '97586306508', '172794296508', '97639391508', '101868786508', '124667676508', '126590591508', '124492441508', '10150376650511509', '97630251508', '10150376648626509', '124734846508', '117099777700', '10150376644221509', '124642876508', '152836806508', '10150376650446509', '124667461508', '103791821359', '100460201508', '100118656508', '99290101508', '98689046508', '99290061508', '125455981508', '144338026508', '94327291508', '102201846508', '10150376650246509', '98134881508', '124659971508', '99289936508', '10150376649111509', '132043991508', '97374396508', '99059441508', '99290036508', '153223036508', '97701956508', '10150376652226509', '125016106508', '97401676508', '10150376644536509', '99290136508', '93617741508', '124658381508', '110134836508', '153148646508', '97444561508', '99290576508', '10150376645906509', '124692781508', '124651561508', '98706991508', '10150376650551509', '99310741508', '101835596508', '101839186508', '10150376644546509', '146111356508', '10150376650681509', '10150376655681509', '99289971508', '99290551508', '10150376645486509', '97410041508', '125097786508', '124497376508', '10150376645101509', '10150376644556509', '10150376643616509', '127068616508', '101948836508', '98867586508', '200560301564', '10150376653101509', '10150376649756509', '102027671508', '99290391508', '99290301508', '97447841508', '99099971508', '101812536508', '10150376653746509', '97405616508', '102094436508', '10150376645536509', '10150376648661509', '124707461508', '100310251508', '10150376653886509', '99290376508', '99290256508', '10150376643376509', '10150376645441509', '99172746508', '125781671508', '124819396508', '10150376649091509', '238059246240', '152627046508', '125181676508', '102405161508', '124742441508', '101651006508', '101160866508', '98086991508', '124743966508', '208006174574', '101798401508', '10150376649701509', '124712631508', '99200141508', '124717651508', '98281896508', '102074921508', '124710306508', '99466026508', '124640966508', '101542376508', '99290321508', '99290541508', '144324586508', '125182071508', '192609927623', '99289431508', '10150376649901509', '99290511508', '10150376650651509', '184442668548', '175856177923', '126337611508', '101979516508', '10150376644561509', '10150376644331509', '103855581508', '145992284022', '10150376648521509', '10150376644551509', '10150376644571509', '124687241508', '10150376645061509', '98016431508', '97691936508', '10150376650251509', '10150376649526509', '46899641508', '10150376650326509', '98062161508', '101809721508', '124963321508', '124527526508', '126264071508', '126451476508', '126009311508', '126522436508', '98906621508', '124636026508', '10150376649961509', '99289926508', '10150376643841509', '97597451508', '143635946508', '99017891508', '101001561508', '206325450574', '99290436508', '99290406508', '127027361508', '124973926508', '97410236508', '93937111508', '147044396508', '101517496508', '144807776508', '99987516508', '97551101508', '10150376649546509', '10150376645531509', '99290361508', '124809786508', '10150376650426509', '99290126508', '125269611508', '99289901508'

#set of shares edges is empty with above posts
#get ncol file from likedby
SELECT CONCAT('p',post_id),CONCAT('u',fb_id) 
FROM likedby 
WHERE post_id in ('101941416508', '101733071508', '144339266508', '200922031566', '99290186508', '199452892615', '125182771508', '187481577632', '146076921508', '124657566508', '98283016508', '10150376644541509', '97633151508', '99290211508', '10150376644821509', '10150376647586509', '101748836508', '100070391508', '10150376648561509', '149769166508', '99290236508', '101381251508', '10150376644336509', '10150376652801509', '193662438023', '102064576508', '97401851508', '10150376644761509', '97425521508', '10150376645081509', '191662812162', '116015066680', '133460336508', '10150376647646509', '124649841508', '101784801508', '101964471508', '10150376654156509', '124774471508', '98852731508', '152678826508', '97356661508', '10150376647886509', '10150376653871509', '99290151508', '124667436508', '143642036508', '98731916508', '97586306508', '172794296508', '97639391508', '101868786508', '124667676508', '126590591508', '124492441508', '10150376650511509', '97630251508', '10150376648626509', '124734846508', '117099777700', '10150376644221509', '124642876508', '152836806508', '10150376650446509', '124667461508', '103791821359', '100460201508', '100118656508', '99290101508', '98689046508', '99290061508', '125455981508', '144338026508', '94327291508', '102201846508', '10150376650246509', '98134881508', '124659971508', '99289936508', '10150376649111509', '132043991508', '97374396508', '99059441508', '99290036508', '153223036508', '97701956508', '10150376652226509', '125016106508', '97401676508', '10150376644536509', '99290136508', '93617741508', '124658381508', '110134836508', '153148646508', '97444561508', '99290576508', '10150376645906509', '124692781508', '124651561508', '98706991508', '10150376650551509', '99310741508', '101835596508', '101839186508', '10150376644546509', '146111356508', '10150376650681509', '10150376655681509', '99289971508', '99290551508', '10150376645486509', '97410041508', '125097786508', '124497376508', '10150376645101509', '10150376644556509', '10150376643616509', '127068616508', '101948836508', '98867586508', '200560301564', '10150376653101509', '10150376649756509', '102027671508', '99290391508', '99290301508', '97447841508', '99099971508', '101812536508', '10150376653746509', '97405616508', '102094436508', '10150376645536509', '10150376648661509', '124707461508', '100310251508', '10150376653886509', '99290376508', '99290256508', '10150376643376509', '10150376645441509', '99172746508', '125781671508', '124819396508', '10150376649091509', '238059246240', '152627046508', '125181676508', '102405161508', '124742441508', '101651006508', '101160866508', '98086991508', '124743966508', '208006174574', '101798401508', '10150376649701509', '124712631508', '99200141508', '124717651508', '98281896508', '102074921508', '124710306508', '99466026508', '124640966508', '101542376508', '99290321508', '99290541508', '144324586508', '125182071508', '192609927623', '99289431508', '10150376649901509', '99290511508', '10150376650651509', '184442668548', '175856177923', '126337611508', '101979516508', '10150376644561509', '10150376644331509', '103855581508', '145992284022', '10150376648521509', '10150376644551509', '10150376644571509', '124687241508', '10150376645061509', '98016431508', '97691936508', '10150376650251509', '10150376649526509', '46899641508', '10150376650326509', '98062161508', '101809721508', '124963321508', '124527526508', '126264071508', '126451476508', '126009311508', '126522436508', '98906621508', '124636026508', '10150376649961509', '99289926508', '10150376643841509', '97597451508', '143635946508', '99017891508', '101001561508', '206325450574', '99290436508', '99290406508', '127027361508', '124973926508', '97410236508', '93937111508', '147044396508', '101517496508', '144807776508', '99987516508', '97551101508', '10150376649546509', '10150376645531509', '99290361508', '124809786508', '10150376650426509', '99290126508', '125269611508', '99289901508') 
INTO OUTFILE '/tmp/soclust/cnn2009_event_likedby.csv' FIELDS TERMINATED BY '\t';

cp /tmp/soclust/cnn_comment_yearweek.ncol /tmp/soclust/cnn2009_event_CommentLikes.ncol
cat /tmp/soclust/cnn2009_event_likedby.csv >> /tmp/soclust/cnn2009_event_CommentLikes.ncol

#get graph with text, event, clust info in graphml format
python /proj/DSL/sincere/big-server/_gited/soclust/select_by_event/graph_text_event_clust.py

cp /tmp/soclust/cnn2009_CommentLikes_EventClustText.graphml /scratch/DSL/sincere-big-server/tmp/

#build cowatch graph between the event-documents
from igraph import *
g_full=Graph.Read_GraphML('/tmp/soclust/cnn2009_CommentLikes_EventClustText.graphml')
vdocs=[v for v in g_full.vs if v['name'][0]=='p']

g_cowatch=Graph()
for v in vdocs:
	g_cowatch.add_vertex(name=v['name'],compo=int(v['compo']),clust=int(v['clust']),event=v['event'],deg=v.degree(),message=v['message'])
	
for i,v1 in enumerate(vdocs):
	for v2 in vdocs[i+1:]:
		w=len(set(g_full.neighborhood(v1))&set(g_full.neighborhood(v2)))
		w12=float(w)/len(g_full.neighborhood(v1))
		w21=float(w)/len(g_full.neighborhood(v2))
		if w12 and w21:
			g_cowatch.add_edge(v1['name'],v2['name'],weight12=w12,weight21=w21)

g_cowatch.write_graphml('/tmp/soclust/cnn2009_CommentLike_CowatchEventClustText.graphml')

#Generate posts in text files for Chang Yung:
mkdir /tmp/soclust/cnntexts
import sys; sys.path.append('/proj/DSL/sincere/big-server/_gited/soclust/byweek_stats/'); import textgraph

texts=textgraph.loadTextFromFile('/tmp/soclust/cnn_text.csv')

post_ids=['101941416508', '101733071508', '144339266508', '200922031566', '99290186508', '199452892615', '125182771508', '187481577632', '146076921508', '124657566508', '98283016508', '10150376644541509', '97633151508', '99290211508', '10150376644821509', '10150376647586509', '101748836508', '100070391508', '10150376648561509', '149769166508', '99290236508', '101381251508', '10150376644336509', '10150376652801509', '193662438023', '102064576508', '97401851508', '10150376644761509', '97425521508', '10150376645081509', '191662812162', '116015066680', '133460336508', '10150376647646509', '124649841508', '101784801508', '101964471508', '10150376654156509', '124774471508', '98852731508', '152678826508', '97356661508', '10150376647886509', '10150376653871509', '99290151508', '124667436508', '143642036508', '98731916508', '97586306508', '172794296508', '97639391508', '101868786508', '124667676508', '126590591508', '124492441508', '10150376650511509', '97630251508', '10150376648626509', '124734846508', '117099777700', '10150376644221509', '124642876508', '152836806508', '10150376650446509', '124667461508', '103791821359', '100460201508', '100118656508', '99290101508', '98689046508', '99290061508', '125455981508', '144338026508', '94327291508', '102201846508', '10150376650246509', '98134881508', '124659971508', '99289936508', '10150376649111509', '132043991508', '97374396508', '99059441508', '99290036508', '153223036508', '97701956508', '10150376652226509', '125016106508', '97401676508', '10150376644536509', '99290136508', '93617741508', '124658381508', '110134836508', '153148646508', '97444561508', '99290576508', '10150376645906509', '124692781508', '124651561508', '98706991508', '10150376650551509', '99310741508', '101835596508', '101839186508', '10150376644546509', '146111356508', '10150376650681509', '10150376655681509', '99289971508', '99290551508', '10150376645486509', '97410041508', '125097786508', '124497376508', '10150376645101509', '10150376644556509', '10150376643616509', '127068616508', '101948836508', '98867586508', '200560301564', '10150376653101509', '10150376649756509', '102027671508', '99290391508', '99290301508', '97447841508', '99099971508', '101812536508', '10150376653746509', '97405616508', '102094436508', '10150376645536509', '10150376648661509', '124707461508', '100310251508', '10150376653886509', '99290376508', '99290256508', '10150376643376509', '10150376645441509', '99172746508', '125781671508', '124819396508', '10150376649091509', '238059246240', '152627046508', '125181676508', '102405161508', '124742441508', '101651006508', '101160866508', '98086991508', '124743966508', '208006174574', '101798401508', '10150376649701509', '124712631508', '99200141508', '124717651508', '98281896508', '102074921508', '124710306508', '99466026508', '124640966508', '101542376508', '99290321508', '99290541508', '144324586508', '125182071508', '192609927623', '99289431508', '10150376649901509', '99290511508', '10150376650651509', '184442668548', '175856177923', '126337611508', '101979516508', '10150376644561509', '10150376644331509', '103855581508', '145992284022', '10150376648521509', '10150376644551509', '10150376644571509', '124687241508', '10150376645061509', '98016431508', '97691936508', '10150376650251509', '10150376649526509', '46899641508', '10150376650326509', '98062161508', '101809721508', '124963321508', '124527526508', '126264071508', '126451476508', '126009311508', '126522436508', '98906621508', '124636026508', '10150376649961509', '99289926508', '10150376643841509', '97597451508', '143635946508', '99017891508', '101001561508', '206325450574', '99290436508', '99290406508', '127027361508', '124973926508', '97410236508', '93937111508', '147044396508', '101517496508', '144807776508', '99987516508', '97551101508', '10150376649546509', '10150376645531509', '99290361508', '124809786508', '10150376650426509', '99290126508', '125269611508', '99289901508']

for pid in ['p'+pid for pid in post_ids]:
	text=texts[pid]
	f=open('/tmp/soclust/cnntexts/%s.txt'%pid,'w')
	f.write(text)
	f.close()

#Convert ChangYung's output:
''
''
import csv
#f_r=open('/tmp/soclust/liwc/Hierarchy_cluster_result.csv','r')
#f_w=open('/tmp/soclust/liwc/cnn2009_liwcHierarchy.csv','w')
f_r=open('/tmp/soclust/liwc/KMeans_cluster_result.csv','r')
f_w=open('/tmp/soclust/liwc/cnn2009_liwcKMeans.csv','w')
reader=csv.DictReader(f_r,['pid','clust'],delimiter=',')
writer=csv.DictWriter(f_w,['pid','clust'],delimiter='\t')
for r in reader:
	r['pid']=r['pid'][:-4]
	writer.writerow(r)

f_r.close()
f_w.close()

#Convert lemur csv
import csv
f_r=open('/scratch/DSL/sincere-big-server/cnnfox/lemur-clusts-csv/lemur-cluster-12.clust.csv','r')
f_w=open('/tmp/soclust/lemur12.csv','w')
reader=csv.DictReader(f_r,['pid','clust'],delimiter='\t')
writer=csv.DictWriter(f_w,['pid','clust'],delimiter='\t')
for r in reader:
	r['pid']='p'+r['pid']
	writer.writerow(r)

f_r.close()
f_w.close()


#Analyze soclust_lead_eigen,liwc_hierarchy(12),liwc_kmeans(12),lemur(12)
sudo apt-get install -y python-sklearn

from igraph import *
from sklearn import metrics

g=Graph.Read_GraphML('/tmp/soclust/cnn2009_CommentLikes_EventClustTextLIWCLemur12_LeadEigen.graphml')
vs=[v for v in g.vs if v['name'][0]=='p']
event=[v['event'] for v in vs]
liwc_h=[v['liwc_h'] for v in vs]
liwc_k=[v['liwc_k'] for v in vs]
lemur10=[v['lemur10'] for v in vs]
soclust=[v['compo']+v['clust'] for v in vs]

print 'liwc_h %f'%metrics.adjusted_rand_score(event,liwc_h)
print 'liwc_k %f'%metrics.adjusted_rand_score(event,liwc_k)
print 'lemur12 %f'%metrics.adjusted_rand_score(event,lemur10)
print 'soclust %f'%metrics.adjusted_rand_score(event,soclust)

